import yaml
# from copy import deepcopy
from abc import ABC, abstractmethod
from pydantic import Field
from typing import Union, Optional, Type, List

from ..core.parser import Parser
from ..core.module_utils import parse_json_from_text # extract_code_blocks
# from ..core.registry import register_model
from .model_configs import LLMConfig


class LLMOutputParser(Parser):

    """
    a basic LLM output parser that directly store the text generated by LLM in the .text attribute.
    """
    content: str = Field(default=None, exclude=True, description="the text generated by LLM")

    @classmethod
    def get_attrs(cls) -> List[str]:
        attrs = [] 
        exclude_attrs = ["class_name", "content"]
        for field, field_info in cls.model_fields.items():
            if field not in exclude_attrs:
                attrs.append(field)
        return attrs
    
    @classmethod
    def get_attr_descriptions(cls) -> dict:
        """
        return the attributes and its description
        """
        attrs = cls.get_attrs()
        results = {} 
        for field_name, field_info in cls.model_fields.items():
            if field_name not in attrs:
                continue
            field_desc = field_info.description if field_info.description is not None else "None"
            results[field_name] = field_desc
        return results

    @classmethod
    def get_content_data(cls, content: str, **kwargs) -> dict:

        attrs = cls.get_attrs()
        if len(attrs) <= 0:
            return {} 
        
        extracted_json_list = parse_json_from_text(content)
        if len(extracted_json_list) > 0:
            json_str = extracted_json_list[0] # only use the first JSON
            try:
                data = yaml.safe_load(json_str)
            except Exception:
                raise ValueError(f"The generated content is not a valid JSON string:\n{json_str}")
            # try:
            #     code_blocks = extract_code_blocks(content) # extract json/python code blocks
            #     code_block = code_blocks[0]
            #     data = {attr: code_block for attr in attrs}
            # except Exception:
            #     data = {attr: content for attr in attrs}
        else:
            raise ValueError(f"The following generated content does not contain JSON string!\n{content}")
        
        return data
    
    @classmethod
    def parse(cls, content: str, **kwargs):
        """
        the method used to parse text generated by LLM. This method only passes the input text to the .text attribute. 
        """
        if not isinstance(content, str):
            assert f"The input to {cls.__name__}.parse should be a str, but found {type(content)}."
        data = cls.get_content_data(content, **kwargs)
        parser = cls.from_dict(data, **kwargs)
        parser.content = content
        return parser

    def __str__(self) -> str:
        return self.to_str()
    
    def to_str(self, **kwargs) -> str:
        return self.content
    
    def get_structured_data(self) -> dict:
        attrs = type(self).get_attrs()
        data = self.to_dict(ignore=["class_name"])
        # structured_data = {attr: data[attr] for attr in attrs}
        structured_data = {key: value for key, value in data.items() if key in attrs}
        return structured_data



class BaseLLM(ABC):
    
    def __init__(self, config: LLMConfig, **kwargs):

        self.config = config
        self.kwargs = kwargs
        self.init_model()
    
    @abstractmethod
    def init_model(self):
        pass

    @abstractmethod
    def formulate_messages(self, prompts: List[str], system_messages: Optional[List[str]] = None) -> List[List[dict]]:
        """
        Converts input prompts into the chat format compatible with different LLMs.

        Args:
            prompts (List[str]): A list of user prompts that need to be converted.
            system_messages (Optional[List[str]]): An optional list of system messages that provide instructions or context to the model.
        
        Returns:
            List[List[dict]]: A list of message lists, where each inner list contains messages in the chat format required by LLMs. 
        """
        pass

    @abstractmethod
    def single_generate(self, messages: List[dict], **kwargs) -> str:
        """
        generate LLM output for a given prompt. 

        Args:
            prompt (str): the input to the LLM.
            generation_config (LLMGenerationConfig): the generation config for LLM.
        
        Returns:
            str: the generated output from LLM.
        """
        pass

    @abstractmethod
    def batch_generate(self, batch_messages: List[List[dict]], **kwargs) -> List[str]:
        """
        generate outputs for a batch of prompts. 

        Args: 
            prompts (List[str]): a batch of inputs to the LLM. 
            generation_config (LLMGenerationConfig): the generation config for LLM.            
        
        Returns:
            List[str]: a list of generated outputs from LLM.
        """
        pass

    def parse_generated_text(self, text: str, parser: Optional[Type[LLMOutputParser]]=None, **kwargs) -> LLMOutputParser:
        """
        use parser to obtain a structured output. 

        Args: 
            text (str): a text that potentially contains structured string. 
            parser (Type[LLMOutputParser]): an LLMOutputParser class. 
        
        Returns:
            LLMOutputParser: an LLMOutputParser object. 
        
        Note: 
            use parser.parse(text) to obtain the result. 
        """
        if not parser:
            parser = LLMOutputParser
        return parser.parse(text)

    def parse_generated_texts(self, texts: List[str], parser: Optional[Type[LLMOutputParser]]=None, **kwargs) -> List[LLMOutputParser]:

        parsed_results = [self.parse_generated_text(text=text, parser=parser, **kwargs) for text in texts]
        return parsed_results

    def generate(
        self,
        prompt: Optional[Union[str, List[str]]] = None,
        system_message: Optional[Union[str, List[str]]] = None,
        messages: Optional[Union[List[dict],List[List[dict]]]] = None,
        parser: Optional[Type[LLMOutputParser]] = None,
        **kwargs
    ) -> Union[LLMOutputParser, List[LLMOutputParser]]:
        
        """
        generate LLM output(s) for (a) prompt(s)/messages and parsed the result into an LLMOutputParser object. 

        Args:
            prompt (Union[str, List[str]]): the input to the LLM. 
            system_message (str): the system message for the LLM. 
            messages: (Union[List[dict],List[List[dict]]]): the chat message for the LLM. 
            parser (Optional[Type[LLMOutputParser]]): A LLMOutputParser (sub)class used to parse the LLM output.
                This class should implement .parse() method to parse the output. If None, LLMOutputParser will be used by default.
        
        Note:
            Either prompt or messages must be provided. Raise an error if both prompt and messages are provided or none of them is provided. 
            If parser is None, use LLMOutputParser by default. 
            Need to calculate the cost of an LLM call!
        """

        if not (prompt or messages):
            raise ValueError("Either 'prompt' or 'messages' must be provided.")
        if prompt and messages:
            raise ValueError("Both 'prompt' and 'messages' are provided. Please provide only one of them.")

        single_generate = False
        if messages is not None:
            if not messages: # empty messages
                return [] 
            if isinstance(messages[0], dict):
                single_generate = True
                messages = [messages]
        
        if prompt is not None:
            if isinstance(prompt, str):
                single_generate = True
                prompt = [prompt]
                if system_message:
                    if not isinstance(system_message, str):
                        raise TypeError(f"'system_message' should be a string when passing a single prompt, but found {type(system_message)}.")
                    system_message = [system_message]
                messages = self.formulate_messages(prompts=prompt, system_messages=system_message)
            elif isinstance(prompt, list) and all(isinstance(p, str) for p in prompt):
                single_generate = False
                if not prompt: # empty prompt
                    return []
                if system_message:
                    if not isinstance(system_message, list) or len(prompt) != len(system_message):
                        raise ValueError(f"'system_message' should be a list of string when passing multiple prompts and the number of prompts ({len(prompt)}) must match the number of system messages ({len(system_message)}).")
                messages = self.formulate_messages(prompts=prompt, system_messages=system_message)
            else:
                raise ValueError(f"'prompt' must be a str or List[str], but found {type(prompt)}.")
        
        generated_texts = self.batch_generate(batch_messages=messages, **kwargs)
        parsed_outputs = self.parse_generated_texts(texts=generated_texts, parser=parser, **kwargs)
        output = parsed_outputs[0] if single_generate else parsed_outputs

        return output


__all__ = ["LLMConfig", "BaseLLM", "LLMOutputParser"]

